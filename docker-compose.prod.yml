services:
  postgres:
    image: postgres:15
    container_name: postgres_prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-shadowshare}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-shadowshare}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis_prod
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  db-init:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: db_initializer_prod
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-shadowshare}
      REDIS_HOST: redis
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: ["sh", "/usr/src/app/scripts/init-db.sh"]
    restart: "no"

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: node_server_prod
    restart: always
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-shadowshare}
      REDIS_HOST: redis
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      NODE_ENV: production
      PORT: ${PORT:-3000}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    networks:
      - app-network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    container_name: react_client_prod
    restart: always
    ports:
      - "80:80"
    depends_on:
      - server
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
